#! /usr/bin/env python
import argparse, os, sys
from flipper import flipperDict
import xcorrFourier


if __name__ == '__main__':
    
    # parse the input arguments
    parser = argparse.ArgumentParser(description="compute fourier space correlation using random maps")
    parser.add_argument('param_file', type=str, help='the parameter file') 
    parser.add_argument('-q', '--quiet', action='store_true', default=False, help='whether to ouput to std out')
    parser.add_argument('-c', '--corr_type', dest='corr_type', default='cross', choices=['cross', 'auto'], required=True, help='are we doing the cross or auto spectrum')
    parser.add_argument('-N', '--nProcs', default=1, type=int, help='number of processors to use')
    args = parser.parse_args()
    
    # read in parameters
    p = flipperDict.flipperDict()
    p.readFromFile(args.param_file)
    
    # if we want to suppress out, redirect stdout to nothing
    if args.quiet:
        sys.stdout = open(os.devnull, "w")
        
    # compute the real space correlation for nMaps pairs of true x random maps
    xcorrFourier.fourierSpaceCorrFromRandoms(p['paramsToUpdate'], p['valsToUpdate'], args.nProcs, corrType=args.corr_type)